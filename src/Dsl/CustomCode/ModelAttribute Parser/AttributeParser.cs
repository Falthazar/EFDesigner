using System;
using System.IO;
using GOLD;

namespace Sawczyn.EFDesigner.EFModel
{
   public static class AttributeParser
   {
      private static Parser _parser;

      private static Parser Parser
      {
         get
         {
            if (_parser == null)
            {
               _parser = new Parser { TrimReductions = false };

               using (MemoryStream stream = new MemoryStream(Resources.AttributeGrammar))
               {
                  using (BinaryReader reader = new BinaryReader(stream))
                  {
                     _parser.LoadTables(reader);
                  }
               }
            }

            return _parser;
         }
      }

      // ReSharper disable once MemberCanBePrivate.Global
      public static string FailMessage { get; private set; }

      public static ParseResult Parse(string txt)
      {
         if (txt == null) throw new ArgumentNullException(nameof(txt));

         // based on skeleton code generated by Gold Parser Builder 5.2 (http://www.goldparser.org)
         FailMessage = null;
         ParseResult result = new ParseResult();

         Parser.Open(ref txt);

         while (true)
         {
            ParseMessage response = Parser.Parse();

            switch (response)
            {
               case ParseMessage.Reduction:
                  if (Parser.CurrentReduction is Reduction reduction)
                  {
                     switch ((ProductionIndex)reduction.Parent.TableIndex())
                     {
                        case ProductionIndex.Name_Identifier:

                           // <Name> ::= Identifier
                           result.Name = reduction.get_Data(0) as string;
                           break;

                        case ProductionIndex.Isidentity_Identity:

                           // <Is Identity> ::= Identity
                           result.IsIdentity = reduction.get_Data(0) as string == "!";
                           break;

                        case ProductionIndex.Isoptional_Optional:

                           // <Is Optional> ::= Optional
                           result.Required = reduction.get_Data(0) as string != "?";
                           break;

                        case ProductionIndex.Maxlength_Lbracket_Decliteral_Rbracket:
                        case ProductionIndex.Maxlength_Lparen_Decliteral_Rparen:

                           // <Max Length> ::= '[' DecLiteral ']'
                           // <Max Length> ::= '(' DecLiteral ')'
                           result.MaxLength = int.Parse(reduction.get_Data(1) as string);
                           break;

                        case ProductionIndex.Lengths_Lbracket_Decliteral_Minus_Decliteral_Rbracket:
                        case ProductionIndex.Lengths_Lparen_Decliteral_Minus_Decliteral_Rparen:
                           // <Lengths> ::= '[' DecLiteral '-' DecLiteral ']'
                           // <Lengths> ::= '(' DecLiteral '-' DecLiteral ')'
                           result.MinLength = int.Parse(reduction.get_Data(1) as string);
                           result.MaxLength = int.Parse(reduction.get_Data(3) as string);

                           if (result.MinLength < 0 || result.MaxLength < 0)
                           {
                              FailMessage = "Min and Max lengths can't be negative numbers";
                              return null;
                           }

                           if (result.MaxLength != 0 && result.MinLength > result.MaxLength)
                           {
                              FailMessage = "Min length cannot be greater than max length";
                              return null;
                           }

                           break;

                        case ProductionIndex.Type_Identifier:

                           // <Type> ::= Identifier
                           result.Type = reduction.get_Data(0) as string;
                           break;

                        case ProductionIndex.Visibility_Public:

                           // <Visibility> ::= public
                           result.SetterVisibility = SetterAccessModifier.Public;
                           break;

                        case ProductionIndex.Visibility_Protected:

                           // <Visibility> ::= protected
                           result.SetterVisibility = SetterAccessModifier.Protected;
                           break;

                        case ProductionIndex.Visibility_Internal:

                           // <Visibility> ::= internal
                           result.SetterVisibility = SetterAccessModifier.Internal;
                           break;

                        case ProductionIndex.Initialvalue_Decliteral:
                        case ProductionIndex.Initialvalue_Hexliteral:
                        case ProductionIndex.Initialvalue_Realliteral:

                           // <Initial Value> ::= DecLiteral | HexLiteral | RealLiteral
                           result.InitialValue = reduction.get_Data(0) as string;
                           break;

                        case ProductionIndex.Initialvalue_Stringliteral:

                           // <Initial Value> ::= StringLiteral
                           result.InitialValue = $"\"{(reduction.get_Data(0) as string).Trim('"')}\"";
                           break;

                        case ProductionIndex.Initialvalue_Charliteral:

                           // <Initial Value> ::= CharLiteral
                           result.InitialValue = $"'{(reduction.get_Data(0) as string).Trim('"', '\'')}'";
                           break;
                     }
                  }
                  break;

               case ParseMessage.Accept:
                  return result;

               case ParseMessage.TokenRead:
                  break;

               case ParseMessage.LexicalError:

                  //Cannot recognize token
                  FailMessage = $"Lexical Error:\nPosition: {Parser.CurrentPosition().Column}\nRead: {Parser.CurrentToken().Data}";
                  return null;

               case ParseMessage.SyntaxError:

                  //Expecting a different token
                  FailMessage = $"Syntax Error:\nPosition: {Parser.CurrentPosition().Column}\nRead: {Parser.CurrentToken().Data}\nExpecting: {Parser.ExpectedSymbols().Text()}";
                  return null;

               case ParseMessage.InternalError:
                  return null;

               case ParseMessage.NotLoadedError:

                  //This error occurs if the CGT was not loaded.                   
                  FailMessage = "Tables not loaded";
                  return null;

               case ParseMessage.GroupError:

                  //GROUP ERROR! Unexpected end of file
                  FailMessage = "Runaway group";
                  return null;
            }
         }
      }

      #region Indices

      private enum ProductionIndex
      {
         Name_Identifier = 3,                                        // <Name> ::= Identifier
         Isidentity_Identity = 4,                                    // <Is Identity> ::= Identity
         Isoptional_Optional = 5,                                    // <Is Optional> ::= Optional
         Maxlength_Lbracket_Decliteral_Rbracket = 6,                 // <Max Length> ::= '[' DecLiteral ']'
         Maxlength_Lparen_Decliteral_Rparen = 7,                     // <Max Length> ::= '(' DecLiteral ')'
         Lengths_Lbracket_Decliteral_Minus_Decliteral_Rbracket = 8,  // <Lengths> ::= '[' DecLiteral '-' DecLiteral ']'
         Lengths_Lparen_Decliteral_Minus_Decliteral_Rparen = 9,      // <Lengths> ::= '(' DecLiteral '-' DecLiteral ')'
         Type_Identifier = 15,                                       // <Type> ::= Identifier
         Visibility_Public = 16,                                     // <Visibility> ::= public
         Visibility_Protected = 17,                                  // <Visibility> ::= protected
         Visibility_Internal = 18,                                   // <Visibility> ::= internal
         Initialvalue_Decliteral = 19,                               // <Initial Value> ::= DecLiteral
         Initialvalue_Hexliteral = 20,                               // <Initial Value> ::= HexLiteral
         Initialvalue_Realliteral = 21,                              // <Initial Value> ::= RealLiteral
         Initialvalue_Stringliteral = 22,                            // <Initial Value> ::= StringLiteral
         Initialvalue_Charliteral = 23                               // <Initial Value> ::= CharLiteral
      }

      #endregion
   }

   public class ParseResult
   {
      public SetterAccessModifier? SetterVisibility { get; set; }
      public string Name { get; set; }
      public string Type { get; set; }
      public bool? Required { get; set; }
      public int? MinLength { get; set; }
      public int? MaxLength { get; set; }
      public string InitialValue { get; set; }
      public bool IsIdentity { get; set; }
   }

}
